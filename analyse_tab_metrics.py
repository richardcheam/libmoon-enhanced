import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data_VLMOP2 = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'FD', 'PBI', 'IP', 'CA'],
    'EPO':             [0.2951, 2.3402, 0.9633, 0.1227,  0.0059, 0.0019, 0.9436, 0.7686,  0.2384],
    'PMGDA':           [0.2947, 2.2732, 0.9675, 0.1236,  0.0074, 0.0019, 0.9525, 0.7689,  0.3403],
    'MOO-SVGD':        [0.2621, 3.0193, 0.4595, 0.0633, -0.0861, 0.0027, 2.8963, 0.5968, 30.5540],
    'HVGrad':          [0.2950, 0.5260, 0.9815, 0.1495,  0.0146, 0.0016, 3.1097, 0.5503, 35.7341],
    'Agg-COSMOS':      [0.2967, 2.9841, 0.9087, 0.1055, -0.0063, 0.0017, 1.0053, 0.7643,  1.0374],
    'Agg-PBI':         [0.2907, 3.9954, 0.9234, 0.0793, -0.0224, 0.0019, 1.6520, 0.6108, 15.8069],
    'Agg-SmoothTche':  [0.2620,13.1226, 0.9817, 0.0013, -0.1109, 0.0013, 4.2249, 0.2830, 62.2321],
    'Agg-LS':          [0.0415, 0.0416, 0.9817, 0.0003, -0.1835, 0.0001, 4.8143, 0.2256, 71.6514],
    'Agg-Tche':        [0.2950, 2.7531, 0.9635, 0.1139,  0.0049, 0.0020, 3.8500, 0.3594, 53.9640],
    'Random':          [0.0465, 0.0721, 0.9789, 0.0002, -0.1862, 0.0004, 4.0417, 0.3904, 54.8465],
    'MGDA-UB':         [0.2061, 2.7735, 0.2188, 0.0042, -0.1521, 0.0028, 2.7394, 0.6257, 27.1783],
    'PMTL':            [0.2834, 5.1081, 0.8391, 0.0134, -0.0670, 0.0024, 1.3013, 0.7555,  4.9155],
    'Agg-AASF':        [0.2916, 4.5903, 0.9712, 0.0926, -0.0077, 0.0031, 1.0684, 0.7715,  1.7419],
    'Agg-PNorm':       [0.1818, 5.8732, 0.9803, 0.0117, -0.1181, 0.0005, 4.5440, 0.2561, 67.3808],
    'Agg-mTche':       [0.2950, 2.5986, 0.9637, 0.1196,  0.0054, 0.0018, 0.9421, 0.7688,  0.2126],
    'Agg-invagg':      [0.0592, 0.4763, 0.9816, 0.0011, -0.1755, 0.0001, 4.8030, 0.2247, 71.6562],
    'Agg-SmoothmTche': [0.2915, 4.6045, 0.9717, 0.0923, -0.0078, 0.0024, 1.0700, 0.7716,  1.7598]
}


data_ZDT4 = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'FD', 'PBI', 'IP', 'CA'],
    'EPO':             [31.9603, 27.0771, 0.7419, 0.0000, -0.0518, 17.6574,  7.1502, 1.8080, 24.9273],
    'PMGDA':           [32.8006, 37.1947, 0.9723, 0.0000, -0.0409, 17.2006,  6.9219, 1.7825, 24.6532],
    'MOO-SVGD':        [28.6322,1965.4416, 0.1415, 0.1006,  0.0545,139.0802, 63.7470, 5.1526, 44.8619],
    'HVGrad':          [33.6927, 25.3434, 0.9999, 0.2148,  0.1678, 25.8333, 12.3743, 1.8711, 39.3433],
    'Agg-COSMOS':      [29.8290, 18.0950, 0.3074, 0.0000, -0.0528, 15.7953,  6.7922, 1.6913, 25.4408],
    'Agg-PBI':         [30.3313, 23.5036, 0.4435, 0.0689,  0.0160, 15.5136,  6.7189, 1.6058, 26.2714],
    'Agg-SmoothTche':  [32.9267, 51.1461, 0.9985, 0.0713,  0.0029, 19.5964, 10.0409, 1.4573, 37.5099],
    'Agg-LS':          [32.7762, 48.7151, 0.9992, 0.0726,  0.0149, 22.2318, 11.9446, 1.4177, 41.9498],
    'Agg-Tche':        [32.9798, 24.9375, 0.9578, 0.0368, -0.0211, 18.0519,  9.1780, 1.4559, 36.6383],
    'Random':          [29.0877, 19.7181, 0.3676, 0.0321, -0.0357, 18.0941,  8.3543, 1.7606, 30.5340],
    'MGDA-UB':         [30.4292, 20.5052, 0.0264, 0.0112, -0.0563, 32.8804, 15.4448, 2.2183, 44.9650],
    'PMTL':            [28.0954,1960.4295, 0.4629, 0.0766,  0.0145, 92.9575, 15.6066, 9.1085, 26.3291],
    'Agg-AASF':        [32.7310, 23.8096, 0.9675, 0.0769,  0.0173, 18.9025,  7.5476, 1.8892, 25.5581],
    'Agg-PNorm':       [33.5316, 35.1659, 0.9946, 0.0740, -0.0092, 19.8562, 10.4118, 1.4352, 38.9851],
    'Agg-mTche':       [32.3460, 42.6510, 0.9506, 0.0380, -0.0340, 20.2261,  7.4304, 2.0205, 24.5944],
    'Agg-invagg':      [34.6063, 26.2340, 0.9996, 0.1545,  0.0969, 20.8514, 11.3416, 1.3518, 42.4459],
    'Agg-SmoothmTche': [32.9368, 29.4873, 0.9662, 0.0000, -0.0451, 20.1516,  7.7092, 1.9428, 24.8094]
}


data_ZDT3 = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'FD', 'PBI', 'IP', 'CA'],
    'EPO':               [0.7601, 12.4476, 0.6915, 0.0472, -0.0356, 0.7797, 0.9245, 0.5185,  6.6988],
    'PMGDA':             [0.6917, 10.0115, 0.7529, 0.0447, -0.0200, 1.2880, 1.0027, 0.5464,  8.6722],
    'MOO-SVGD':          [0.5281, 60.6257, 0.3600, 0.0385, -0.0593, 5.7116, 5.0512, 0.7008, 40.0663],
    'HVGrad':            [0.9983, 10.4236, 0.8908, 0.0745,  0.0020, 0.1622, 2.8438, 0.2175, 56.4732],
    'Agg-COSMOS':        [0.7265,  8.7171, 0.5680, 0.0384, -0.0672, 0.6786, 0.8516, 0.4488,  7.8744],
    'Agg-PBI':           [0.9064, 17.9570, 0.7584, 0.0025, -0.0952, 0.7795, 2.0954, 0.2069, 48.3178],
    'Agg-SmoothTche':    [0.8726, 13.5458, 0.8875, 0.0137, -0.0638, 0.5973, 2.6951, 0.1641, 57.5921],
    'Agg-LS':            [0.9125, 17.9316, 0.8807, 0.0008, -0.1149, 0.0841, 3.3685, 0.1021, 70.4180],
    'Agg-Tche':          [0.7611,  9.0308, 0.6676, 0.0288, -0.0487, 0.7943, 2.5796, 0.2619, 50.3906],
    'Random':            [0.9471, 19.1003, 0.8030, 0.0008, -0.1378, 0.2429, 2.9791, 0.1235, 67.0749],
    'MGDA-UB':           [0.0105,  0.2221, 0.0002, 0.0000, -0.2237, 0.0301, 3.6640, 0.4977, 44.9984],
    'PMTL':              [0.6870, 78.7861, 0.6753, 0.0613,  0.0028, 9.9689, 2.1676, 1.4190,  7.7517],
    'Agg-AASF':          [0.7218,  9.8266, 0.7559, 0.0147, -0.0662, 0.8376, 1.1229, 0.4964, 12.4267],
    'Agg-PNorm':         [0.7472,  9.2808, 0.9025, 0.0197, -0.0616, 0.9976, 2.8404, 0.2208, 57.4637],
    'Agg-mTche':         [0.7880, 11.8253, 0.7611, 0.0231, -0.0480, 0.6321, 0.9996, 0.5045,  7.7418],
    'Agg-invagg':        [0.9543, 20.8948, 0.9401, 0.0008, -0.0981, 0.2430, 3.3249, 0.1331, 69.2008],
    'Agg-SmoothmTche':   [0.7486,  7.9703, 0.8079, 0.0592, -0.0051, 1.0610, 0.9799, 0.5311,  7.0028]
}

data_regression = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'PBI', 'IP', 'CA'],
    'EPO':               [15.9602, 1.8992, 0.6359, 0.0000, -0.1775, 16.9376, 4.3881, 23.5049],
    'PMGDA':             [15.9146, 7.0315, 0.8770, 0.0035, -0.1028, 16.8530, 4.5524, 22.3514],
    'MOO-SVGD':          [16.1384, 3.4994, 0.4614, 0.0631, -0.0832, 18.1266, 4.0941, 27.6251],
    'HVGrad':            [16.2719, 2.9278, 0.6331, 0.0932, -0.0375, 17.9022, 4.1820, 26.6341],
    'Agg-COSMOS':        [15.6910, 0.9119, 0.1716, 0.0269, -0.1308, 17.7572, 4.1268, 26.6961],
    'Agg-PBI':           [16.1459, 3.5848, 0.4143, 0.0107, -0.0872, 17.3505, 4.1284, 26.0555],
    'Agg-SmoothTche':    [16.0758, 6.0440, 0.6359, 0.0000, -0.1671, 19.7688, 4.0225, 30.6451],
    'Agg-LS':            [16.2704, 2.3276, 0.6297, 0.0724, -0.0338, 19.3758, 3.9852, 30.3508],
    'Agg-Tche':          [15.9143, 0.0004, 0.6359, 0.0000, -0.1869, 19.7344, 4.0338, 30.5004],
    'Random':            [15.1926, 0.4520, 0.0714, 0.0015, -0.1912, 18.0714, 4.0594, 27.8104],
    'MGDA-UB':           [16.0192, 2.9925, 0.4014, 0.0075, -0.1145, 18.4038, 4.0727, 28.2789],
    'PMTL':              [16.0021, 13.0439, 0.8723, 0.0072, -0.0783, 17.2202, 4.6002, 22.6421],
    'Agg-AASF':          [15.9781, 1.5479, 0.6353, 0.0012, -0.1699, 16.9495, 4.3808, 23.5693],
    'Agg-PNorm':         [16.2564, 7.4667, 0.6359, 0.0087, -0.0871, 19.6606, 3.9917, 30.7440],
    'Agg-mTche':         [15.9143, 0.0002, 0.6359, 0.0000, -0.1869, 16.9155, 4.3907, 23.4550],
    'Agg-invagg':        [16.2698, 4.0405, 0.6306, 0.0557, -0.0434, 19.2597, 3.9868, 30.1634],
    'Agg-SmoothmTche':   [15.9608, 1.9236, 0.6359, 0.0000, -0.1774, 16.9379, 4.3880, 23.5056]
}

data_adult = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'PBI', 'IP', 'CA'],
    'EPO':                 [0.6960, 2.4489, 0.0769, 0.0013, -0.1686, 0.3847, 0.3112, 1.0265],
    'PMGDA':               [0.6799, 2.6846, 0.0963, 0.0039, -0.1670, 0.3892, 0.3229, 0.6273],
    'MOO-SVGD':            [0.6521, 0.2840, 0.0661, 0.0579, -0.0987, 1.1216, 0.5084, 9.8876],
    'HVGrad':              [0.6989, 0.7980, 0.0842, 0.0223, -0.1418, 0.7289, 0.3502, 8.5586],
    'Agg-COSMOS':          [0.6781, 0.4902, 0.0536, 0.0041, -0.1916, 0.4033, 0.2800, 2.7163],
    'Agg-PBI':             [0.6589, 0.1242, 0.0141, 0.0011, -0.2144, 0.4397, 0.2625, 5.0396],
    'Agg-SmoothTche':      [0.6485, 0.0127, 0.0006, 0.0001, -0.2243, 0.4858, 0.2573, 7.1006],
    'Agg-LS':              [0.6514, 0.0209, 0.0018, 0.0003, -0.2232, 0.4850, 0.2568, 7.1056],
    'Agg-Tche':            [0.6487, 0.0155, 0.0003, 0.0001, -0.2242, 0.4854, 0.2573, 7.0838],
    'Random':              [0.6488, 0.0365, 0.0032, 0.0001, -0.2230, 0.4719, 0.2646, 6.0891],
    'MGDA-UB':             [0.4985, 0.0953, 0.0020, 0.0003, -0.2199, 0.9453, 0.4250, 10.3860],
    'PMTL':                [0.6508, 1.0199, 0.0462, 0.0031, -0.1731, 0.5688, 0.3492, 5.2239],
    'Agg-AASF':            [0.6949, 2.9159, 0.0757, 0.0046, -0.1645, 0.4445, 0.3237, 2.5666],
    'Agg-PNorm':           [0.6486, 0.0125, 0.0006, 0.0001, -0.2242, 0.4858, 0.2573, 7.1009],
    'Agg-mTche':           [0.6947, 2.2483, 0.0753, 0.0013, -0.1697, 0.3867, 0.3103, 1.1014],
    'Agg-invagg':          [0.6516, 0.0277, 0.0027, 0.0004, -0.2231, 0.4852, 0.2569, 7.1049],
    'Agg-SmoothmTche':     [0.6950, 2.9355, 0.0757, 0.0055, -0.1635, 0.4521, 0.3256, 2.7372]
}

data_compass = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'PBI', 'IP', 'CA'],
    'EPO':                 [0.7646,  9.2475, 0.1717, 0.0016, -0.1355, 0.4555, 0.2963,  3.8649],
    'PMGDA':               [0.7619,  9.1666, 0.1729, 0.0016, -0.1308, 0.4555, 0.3058,  3.2667],
    'MOO-SVGD':            [0.4452,  0.7775, 0.1027, 0.0600, -0.1055, 2.4881, 0.4252, 34.8538],
    'HVGrad':              [0.7686,  4.0489, 0.2212, 0.1308,  0.0120, 2.8586, 0.4642, 35.4677],
    'Agg-COSMOS':          [0.7569,  2.9760, 0.1281, 0.0024, -0.1394, 0.4874, 0.2616,  5.6722],
    'Agg-PBI':             [0.7143,  1.3890, 0.0530, 0.0013, -0.1791, 0.6048, 0.1993, 16.0884],
    'Agg-SmoothTche':      [0.7661, 10.4800, 0.1662, 0.0023, -0.1645, 1.3095, 0.1676, 38.3190],
    'Agg-LS':              [0.7507, 15.2148, 0.1842, 0.0008, -0.1875, 1.3114, 0.1660, 36.8966],
    'Agg-Tche':            [0.7574,  6.9999, 0.1459, 0.0007, -0.1447, 1.3473, 0.1774, 38.8634],
    'Random':              [0.6744,  0.0713, 0.0049, 0.0006, -0.2203, 0.7438, 0.1807, 23.9173],
    'MGDA-UB':             [0.6216,  0.5884, 0.0225, 0.0010, -0.1994, 0.9704, 0.2332, 24.4223],
    'PMTL':                [0.7243,  5.4162, 0.1363, 0.0007, -0.1281, 0.5269, 0.3327,  4.2498],
    'Agg-AASF':            [0.7630, 10.3276, 0.1732, 0.0004, -0.1452, 0.4904, 0.2924,  5.4446],
    'Agg-PNorm':           [0.7657, 10.0586, 0.1641, 0.0012, -0.1650, 1.3105, 0.1674, 38.5660],
    'Agg-mTche':           [0.7599,  8.9582, 0.1665, 0.0008, -0.1380, 0.4642, 0.2961,  4.1337],
    'Agg-invagg':          [0.7526, 14.4005, 0.1791, 0.0010, -0.1875, 1.2807, 0.1660, 36.6185],
    'Agg-SmoothmTche':     [0.7606, 10.4251, 0.1744, 0.0016, -0.1452, 0.4959, 0.2945,  5.5167]
}

data_mnist = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'PBI', 'IP', 'CA'],
    'EPO':                 [0.6458,  0.8357, 0.1337, 0.0209, -0.1581, 0.4041, 0.2649,  1.0888],
    'PMGDA':               [0.6010,  1.3533, 0.1314, 0.0209, -0.1435, 0.4555, 0.2994,  1.0378],
    'MOO-SVGD':            [0.6172, 451.4538, 4.6416, 0.0608, -0.0285, 13.6436, 1.6975, 25.1853],
    'HVGrad':              [0.7022,  5.1663, 0.4285, 0.0425, -0.0862, 1.1883, 0.2950, 19.4514],
    'Agg-COSMOS':          [0.6385,  1.0989, 0.1167, 0.0191, -0.1590, 0.4138, 0.2706,  1.1075],
    'Agg-PBI':             [0.6599,  0.9151, 0.1170, 0.0173, -0.1619, 0.4162, 0.2580,  1.8488],
    'Agg-SmoothTche':      [0.6733,  0.8913, 0.0991, 0.0171, -0.1645, 0.7588, 0.2268, 15.5965],
    'Agg-LS':              [0.6659,  0.8267, 0.0770, 0.0148, -0.1775, 0.6865, 0.2196, 13.9314],
    'Agg-Tche':            [0.6333,  1.1356, 0.1263, 0.0185, -0.1565, 0.8987, 0.2547, 16.8602],
    'Random':              [0.6151,  0.5407, 0.0404, 0.0026, -0.2022, 0.6109, 0.2345,  9.8688],
    'MGDA-UB':             [0.6519,  0.4941, 0.0425, 0.0042, -0.1967, 0.6047, 0.2193, 11.0252],
    'PMTL':                [0.5699,  3.0391, 0.1215, 0.0144, -0.1450, 0.5760, 0.3158,  3.2387],
    'Agg-AASF':            [0.6742,  1.0494, 0.1243, 0.0199, -0.1569, 0.3755, 0.2410,  1.3508],
    'Agg-PNorm':           [0.6766,  1.1436, 0.0874, 0.0125, -0.1709, 0.7236, 0.2179, 15.2637],
    'Agg-mTche':           [0.6510,  1.2874, 0.1228, 0.0212, -0.1546, 0.3967, 0.2634,  0.9228],
    'Agg-invagg':          [0.6566,  1.4848, 0.0752, 0.0072, -0.1753, 0.7172, 0.2291, 13.6522],
    'Agg-SmoothmTche':     [0.6710,  0.8360, 0.1217, 0.0188, -0.1565, 0.3780, 0.2435,  1.2998],
}

data_fashion = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'PBI', 'IP', 'CA'],
    'EPO':                 [0.3662,  1.4523, 0.1655, 0.0268, -0.1429, 0.7154, 0.4724, 0.8954],
    'PMGDA':               [0.3249,  1.3046, 0.1894, 0.0270, -0.1378, 0.7548, 0.5112, 0.5965],
    'MOO-SVGD':            [0.3068, 225.6705, 2.1240, 0.0510, -0.0315, 10.7687, 1.7233, 20.2061],
    'HVGrad':              [0.4211,  4.8077, 0.4543, 0.0474, -0.0776, 1.6534, 0.4793, 15.2113],
    'Agg-COSMOS':          [0.3809,  1.1971, 0.1321, 0.0195, -0.1545, 0.7228, 0.4497, 1.6457],
    'Agg-PBI':             [0.3713,  0.7135, 0.1324, 0.0224, -0.1529, 0.7229, 0.4663, 1.2031],
    'Agg-SmoothTche':      [0.3913,  1.2139, 0.1059, 0.0146, -0.1622, 1.1452, 0.4285, 10.2273],
    'Agg-LS':              [0.3758,  0.8730, 0.0614, 0.0091, -0.1842, 1.0183, 0.4179, 8.3760],
    'Agg-Tche':            [0.3651,  0.7518, 0.1367, 0.0228, -0.1459, 1.3231, 0.4599, 11.8038],
    'Random':              [0.3459,  0.5399, 0.0482, 0.0019, -0.2000, 0.9568, 0.4376, 6.3544],
    'MGDA-UB':             [0.3582,  0.7514, 0.0487, 0.0031, -0.1948, 0.9383, 0.4272, 6.4555],
    'PMTL':                [0.3021,  3.0981, 0.1879, 0.0192, -0.1302, 0.9186, 0.5332, 2.4965],
    'Agg-AASF':            [0.3849,  0.6962, 0.1349, 0.0212, -0.1541, 0.6905, 0.4440, 1.2208],
    'Agg-PNorm':           [0.3847,  1.1689, 0.0870, 0.0126, -0.1715, 1.0847, 0.4216, 9.3877],
    'Agg-mTche':           [0.3584,  1.4573, 0.1643, 0.0257, -0.1416, 0.7186, 0.4770, 0.8334],
    'Agg-invagg':          [0.3735,  0.8790, 0.0675, 0.0073, -0.1837, 1.0307, 0.4238, 8.3168],
    'Agg-SmoothmTche':     [0.3926,  1.1694, 0.1459, 0.0208, -0.1488, 0.6818, 0.4435, 1.0888],
}

data_fmnist = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'PBI', 'IP', 'CA'],
    'EPO':                 [0.5708,  1.5426, 0.1580, 0.0256, -0.1326, 0.5310, 0.3478,  1.2775],
    'PMGDA':               [0.5253,  1.8931, 0.1849, 0.0302, -0.1224, 0.5608, 0.3881,  0.6211],
    'MOO-SVGD':            [0.5110, 452.6877, 2.2447, 0.0855,  0.0113, 19.7069, 2.2320, 29.0674],
    'HVGrad':              [0.6259,  7.6618, 0.5069, 0.0490, -0.0634, 1.6411, 0.3604, 22.7955],
    'Agg-COSMOS':          [0.5735,  0.8594, 0.1430, 0.0283, -0.1397, 0.5172, 0.3366,  1.3540],
    'Agg-PBI':             [0.5650,  0.6749, 0.1298, 0.0257, -0.1435, 0.5479, 0.3403,  1.9711],
    'Agg-SmoothTche':      [0.5929,  1.3651, 0.1076, 0.0220, -0.1373, 1.1901, 0.2961, 20.2666],
    'Agg-LS':              [0.5867,  1.0987, 0.1025, 0.0133, -0.1619, 0.9928, 0.2859, 16.9126],
    'Agg-Tche':            [0.5372,  1.7226, 0.1307, 0.0291, -0.1170, 1.5774, 0.3477, 22.4980],
    'Random':              [0.5234,  0.9138, 0.0584, 0.0033, -0.1943, 0.8711, 0.3113, 11.8738],
    'MGDA-UB':             [0.5567,  0.7942, 0.0460, 0.0060, -0.1915, 0.7823, 0.2898, 11.0357],
    'PMTL':                [0.5159,  2.0603, 0.1722, 0.0243, -0.1232, 0.6642, 0.3812,  2.9742],
    'Agg-AASF':            [0.6076,  1.1600, 0.1895, 0.0295, -0.1340, 0.5851, 0.3199,  3.9059],
    'Agg-PNorm':           [0.5899,  0.9089, 0.1148, 0.0235, -0.1434, 1.1180, 0.2932, 19.0815],
    'Agg-mTche':           [0.5625,  0.8833, 0.1667, 0.0297, -0.1324, 0.5359, 0.3513,  1.2871],
    'Agg-invagg':          [0.5804,  1.8570, 0.1168, 0.0091, -0.1578, 1.0251, 0.2968, 16.8035],
    'Agg-SmoothmTche':     [0.5956,  1.1483, 0.1793, 0.0275, -0.1360, 0.5867, 0.3248,  3.7009],
}

data_electricity_demand = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'PBI', 'IP', 'CA'],
    'EPO':                 [0.9440,  3.4553, 0.0054, 0.0004, -0.2095, 0.1457, 0.0468, 18.5315],
    'MOO-SVGD':            [0.9402,  0.6607, 0.2108, 0.0520, -0.1043, 0.7166, 0.0984, 37.8408],
    'HVGrad':              [0.9458,  0.0855, 0.0073, 0.0010, -0.2196, 0.1390, 0.0306, 27.5166],
    'Agg-COSMOS':          [0.9353,  1.7980, 0.0744, 0.0134, -0.1648, 0.1521, 0.0987,  2.2194],
    'Agg-PBI':             [0.9457,  0.1161, 0.0055, 0.0004, -0.2200, 0.1301, 0.0306, 25.4735],
    'Agg-SmoothTche':      [0.9470,  0.1337, 0.0068, 0.0003, -0.2207, 0.1421, 0.0290, 30.1611],
    'Agg-LS':              [0.9457,  0.1331, 0.0059, 0.0003, -0.2204, 0.1438, 0.0294, 30.2202],
    'Agg-Tche':            [0.9449,  2.2535, 0.0089, 0.0006, -0.2071, 0.2000, 0.0328, 33.7109],
    'Random':              [0.9442,  0.0885, 0.0029, 0.0002, -0.2229, 0.1353, 0.0295, 27.8089],
    'MGDA-UB':             [0.9431,  0.0592, 0.0046, 0.0002, -0.2207, 0.1396, 0.0313, 26.9737],
    'PMTL':                [0.9430,  1.1541, 0.0047, 0.0001, -0.2128, 0.1440, 0.0391, 20.4625],
    'Agg-AASF':            [0.9456,  0.0946, 0.0061, 0.0000, -0.2190, 0.1382, 0.0317, 24.9968],
    'Agg-PNorm':           [0.9458,  0.1054, 0.0063, 0.0000, -0.2187, 0.1455, 0.0303, 30.1850],
    'Agg-mTche':           [0.9443,  3.2844, 0.0064, 0.0004, -0.2055, 0.1453, 0.0475, 16.9820],
    'Agg-invagg':          [0.9447,  0.1085, 0.0060, 0.0001, -0.2194, 0.1484, 0.0307, 29.9879],
    'Agg-SmoothmTche':     [0.9464,  0.1289, 0.0067, 0.0005, -0.2198, 0.1347, 0.0308, 25.4470],
}


data_dsprites = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'PBI', 'IP', 'CA'],
    'EPO':                 [0.9828,  2.1732, 0.1621, 0.0069, -0.1644, 0.1114, 0.0750,  1.8323],
    'MOO-SVGD':            [0.9655, 392.7558, 1.6981, 0.0624, -0.0343, 11.8852, 1.2440, 28.3955],
    'Agg-COSMOS':          [0.9354,  2.3168, 0.1662, 0.0151, -0.1471, 0.1743, 0.1226,  1.0388],
    'Agg-PBI':             [0.9753,  4.2894, 0.1775, 0.0058, -0.1575, 0.1591, 0.0852,  7.0436],
    'Agg-SmoothTche':      [0.9818,  7.5843, 0.1792, 0.0078, -0.1536, 0.5002, 0.0617, 33.9669],
    'Agg-LS':              [0.9880,  6.5463, 0.1082, 0.0068, -0.1668, 0.3613, 0.0452, 30.0793],
    'Agg-Tche':            [0.9501, 57.9103, 0.1825, 0.0285, -0.0936, 2.5012, 0.1194, 39.6102],
    'Random':              [0.9709,  2.3084, 0.1566, 0.0080, -0.1500, 0.3209, 0.0898, 19.5297],
    'MGDA-UB':             [0.9853,  2.6691, 0.0552, 0.0060, -0.1778, 0.2047, 0.0494, 22.4438],
    'PMTL':                [0.9427,  6.3306, 0.2857, 0.0240, -0.1185, 0.3262, 0.1786,  3.6285],
    'Agg-AASF':            [0.9928,  6.4936, 0.0567, 0.0057, -0.1722, 0.1322, 0.0720, 10.3291],
    'Agg-PNorm':           [0.9821, 12.2562, 0.1629, 0.0031, -0.1598, 0.5434, 0.0535, 33.9164],
    'Agg-mTche':           [0.9848,  6.7707, 0.1594, 0.0065, -0.1613, 0.1213, 0.0879,  1.5351],
    'Agg-SmoothmTche':     [0.9947,  3.8382, 0.0566, 0.0036, -0.1799, 0.1099, 0.0506, 11.9242],
}


data = data_dsprites

df = pd.DataFrame(data)
df.set_index('Metric', inplace=True)


# Inverting metrics where "smaller is better
#inverse_metrics = ['Spacing', 'FD', 'CA', 'PBI']
inverse_metrics = ['Spacing', 'CA', 'PBI']
for metric in inverse_metrics:
    max_val = df.loc[metric].max()
    df.loc[metric] = max_val - df.loc[metric]


# Min-max normalization on each line (each metric)
df_norm = (df - df.min(axis=1).values.reshape(-1,1)) / \
          (df.max(axis=1) - df.min(axis=1)).values.reshape(-1,1)


#filter VLMOP2
#df_filter = df_norm.filter(items=['EPO', 'PMGDA', 'Agg-COSMOS', 'Agg-AASF', 'Agg-mTche', 'Agg-SmoothmTche' ])
#df_filter = df_norm.filter(items=['Agg-PBI', 'MOO-SVGD', 'MGDA-UB', 'PMTL' ])
#df_filter = df_norm.filter(items=['Agg-Tche', 'HVGrad' ])
#df_filter = df_norm.filter(items=[ 'Agg-SmoothTche', 'Agg-LS', 'Random', 'Agg-PNorm', 'Agg-invagg' ])

#filter ZDT3
#df_filter = df_norm.filter(items=['EPO', 'PMGDA', 'Agg-COSMOS', 'Agg-AASF', 'Agg-mTche', 'Agg-SmoothmTche' ])
#df_filter = df_norm.filter(items=['Agg-PBI', 'Agg-LS', 'Agg-Tche', 'Random', 'Agg-PNorm', 'Agg-invagg' ])
#df_filter = df_norm.filter(items=['MOO-SVGD', 'HVGrad',  'Agg-SmoothTche' ])
#df_filter = df_norm.filter(items=['MGDA-UB', 'PMTL'])

#filter ZDT4
#df_filter = df_norm.filter(items=['EPO', 'PMGDA', 'Agg-AASF', 'Agg-mTche', 'Agg-SmoothmTche' ])
#df_filter = df_norm.filter(items=[ 'Agg-SmoothTche', 'Agg-LS', 'Agg-PNorm','Agg-Tche','HVGrad', 'Agg-invagg'  ])
#df_filter = df_norm.filter(items=[  'Random', 'Agg-COSMOS','Agg-PBI' ])
#df_filter = df_norm.filter(items=['MOO-SVGD', 'MGDA-UB', 'PMTL' ])

#filter regression
#df_filter = df_norm.filter(items=['EPO', 'Agg-AASF', 'Agg-mTche', 'Agg-SmoothmTche' ])
#df_filter = df_norm.filter(items=[ 'Agg-SmoothTche', 'Agg-LS', 'Agg-PNorm', 'Agg-invagg'  ])
#df_filter = df_norm.filter(items=[  'Random', 'Agg-COSMOS','Agg-PBI','HVGrad','MOO-SVGD','MGDA-UB' ])
#df_filter = df_norm.filter(items=['PMGDA', 'PMTL', 'Agg-Tche' ])

#filter adult
#df_filter = df_norm.filter(items=['EPO', 'PMGDA', 'Agg-AASF', 'Agg-mTche', 'Agg-SmoothmTche' ])
#df_filter = df_norm.filter(items=[ 'Agg-SmoothTche', 'Agg-LS', 'Agg-PNorm','Agg-Tche' ])
#df_filter = df_norm.filter(items=[  'Random', 'Agg-COSMOS','Agg-PBI' ])
#df_filter = df_norm.filter(items=['MOO-SVGD', 'MGDA-UB', 'PMTL','HVGrad' ])

#filter compass
#df_filter = df_norm.filter(items=['EPO', 'PMGDA', 'Agg-AASF', 'Agg-mTche', 'Agg-SmoothmTche', 'PMTL' ])
#df_filter = df_norm.filter(items=[ 'Agg-SmoothTche', 'Agg-LS', 'Agg-PNorm','Agg-Tche' ])
#df_filter = df_norm.filter(items=[  'Random', 'Agg-COSMOS','Agg-PBI' , 'MGDA-UB'])
#df_filter = df_norm.filter(items=['MOO-SVGD','HVGrad' ])

#filter mnist
#df_filter = df_norm.filter(items=['EPO', 'PMGDA', 'Agg-AASF', 'Agg-mTche', 'Agg-SmoothmTche' ])
#df_filter = df_norm.filter(items=[ 'Agg-SmoothTche', 'Agg-LS', 'Agg-PNorm','Agg-Tche','HVGrad', 'Agg-invagg'  ])
#df_filter = df_norm.filter(items=[  'Random', 'Agg-COSMOS','Agg-PBI' ])
#df_filter = df_norm.filter(items=['MOO-SVGD', 'MGDA-UB', 'PMTL' ])

#filter fmnist
#df_filter = df_norm.filter(items=['EPO', 'PMGDA', 'Agg-AASF', 'Agg-mTche', 'Agg-SmoothmTche' ])
#df_filter = df_norm.filter(items=[ 'Agg-SmoothTche', 'Agg-LS', 'Agg-PNorm','Agg-Tche','HVGrad', 'Agg-invagg'  ])
#df_filter = df_norm.filter(items=[  'Random', 'Agg-COSMOS','Agg-PBI' ])
#df_filter = df_norm.filter(items=['MOO-SVGD', 'MGDA-UB', 'PMTL' ])

#filter fashion
#df_filter = df_norm.filter(items=['EPO', 'PMGDA', 'Agg-AASF', 'Agg-mTche', 'Agg-SmoothmTche' ])
#df_filter = df_norm.filter(items=[ 'Agg-SmoothTche', 'Agg-LS', 'Agg-PNorm','Agg-Tche','HVGrad', 'Agg-invagg'  ])
#df_filter = df_norm.filter(items=[  'Random', 'Agg-COSMOS','Agg-PBI' ])
#df_filter = df_norm.filter(items=['MOO-SVGD', 'MGDA-UB', 'PMTL' ])

#filter electricity_demand
#df_filter = df_norm.filter(items=['EPO', 'Agg-mTche' ])
#df_filter = df_norm.filter(items=[ 'Agg-SmoothTche', 'Agg-LS', 'Agg-PNorm','Agg-Tche','HVGrad', 'Agg-invagg' , 'Agg-SmoothmTche',  'Agg-AASF' ])
#df_filter = df_norm.filter(items=[  'Random','Agg-PBI', 'PMTL', 'MGDA-UB' ])
#df_filter = df_norm.filter(items=['MOO-SVGD', 'Agg-COSMOS' ])

#filter dsprites
df_filter = df_norm.filter(items=['EPO', 'PMGDA', 'Agg-AASF', 'Agg-mTche', 'Agg-SmoothmTche', 'Agg-PBI'])
df_filter = df_norm.filter(items=[ 'Agg-SmoothTche', 'Agg-LS', 'Agg-PNorm', 'MGDA-UB'  ])
df_filter = df_norm.filter(items=[ 'Agg-COSMOS', 'PMTL'])
df_filter = df_norm.filter(items=['MOO-SVGD', 'Random', 'Agg-Tche' ])



# Radar Chart
labels = df_filter.index.tolist()
num_vars = len(labels)

angles = np.linspace(0, 2 * np.pi, num_vars, endpoint=False).tolist()
angles += angles[:1]

fig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(polar=True))
methods = df_filter.columns.tolist()

for idx, method in enumerate(methods):
    values = df_filter[method].tolist()
    values += values[:1]
    ax.plot(angles, values, label=method, linewidth=2)
    ax.fill(angles, values, alpha=0.1) 

ax.set_theta_offset(np.pi / 2)
ax.set_theta_direction(-1)
ax.set_thetagrids(np.degrees(angles[:-1]), labels)
ax.set_ylim(0, 1)
ax.set_yticklabels([])   # supprime les labels
ax.grid(True)  
plt.legend()
plt.tight_layout()
#plt.show()
plt.savefig('radar_charts/Radar_Charts_dsprites_4')

