import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# ---- paste your data_* dicts above this line ----
data_VLMOP2 = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'FD', 'PBI', 'IP', 'CA', 'Sparsity'],
    'VeLO-LS':      [0.0424, 0.0747, 0.9815, 0.0002, -0.1837, 0.0005, 4.7774, 0.2320, 70.8966, 23.4769],
    'VeLO-Tche':    [0.2951, 2.5010, 0.9632, 0.1196,  0.0059, 0.0021, 3.8478, 0.3604, 53.8834,  2.6016],
    'VeLO-PBI':     [0.2876, 7.3015, 0.9480, 0.0077, -0.0535, 0.0019, 1.7337, 0.6065, 17.1319,  3.0482],
    'VeLO-COSMOS':  [0.2966, 2.9516, 0.9086, 0.1044, -0.0066, 0.0023, 1.0078, 0.7643,  1.0690,  2.3389],
    'VeLO-STche':   [0.2620,13.1476, 0.9816, 0.0012, -0.1109, 0.0012, 4.2247, 0.2830, 62.2301,  4.6327],
    'VeLO-AASF':    [0.2796, 5.0070, 0.8327, 0.0676, -0.0176, 0.2839, 1.4832, 0.7576,  6.6716,  3.1916],
    'VeLO-PNorm':   [0.1818, 5.8596, 0.9802, 0.0116, -0.1180, 0.0009, 4.5439, 0.2561, 67.3797,  9.9909],
    'VeLO-mTche':   [0.2950, 2.6450, 0.9627, 0.1191,  0.0050, 0.0020, 0.9406, 0.7687,  0.1945,  2.6062],
    'VeLO-invagg':  [0.0592, 0.4755, 0.9815, 0.0011, -0.1755, 0.0005, 4.8029, 0.2247, 71.6541, 20.1962],
    'VeLO-SmTche':  [0.2764, 4.7247, 0.8380, 0.0626, -0.0182, 0.3063, 1.4897, 0.7585,  6.7751,  3.1828],
    'VeLO-EPO':     [0.2951, 2.1995, 0.9636, 0.1226,  0.0065, 0.0017, 0.9483, 0.7685,  0.2972,  2.6012],
    'VeLO-MGDAUB':  [0.2065, 4.2710, 0.2369, 0.0009, -0.1699, 0.0025, 2.7460, 0.6223, 27.4164,  0.5823],
    'VeLO-PMGDA':   [0.2947, 2.2079, 0.9681, 0.1277,  0.0078, 0.0020, 0.9500, 0.7690,  0.3057,  2.6209],
    'VeLO-Random':  [0.0426, 0.0922, 0.7839, 0.0000, -0.1915, 0.0004, 3.1046, 0.6030, 33.9668, 16.8024],
    'VeLO-MOOSVGD': [0.2552, 0.6396, 0.4161, 0.0640, -0.0916, 0.0026, 2.5582, 0.6304, 24.9033,  0.4741],
    'VeLO-PMTL':    [0.2310, 3.9157, 0.3259, 0.0016, -0.1468, 0.0025, 2.0951, 0.6972, 16.4519,  0.7142],
    'VeLO-HVGrad':  [0.2949, 0.7721, 0.9815, 0.1443,  0.0142, 0.0018, 2.9482, 0.5724, 32.8409,  2.6318],
}

data_ZDT3 = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'FD', 'PBI', 'IP', 'CA', 'Sparsity'],
    'VeLO-LS':      [0.9690, 49.4664, 0.8824, 0.0020, -0.1028, 1.5650, 3.1152, 0.2615, 59.5456,  9.1757],
    'VeLO-Tche':    [0.7125, 14.8630, 0.8869, 0.0350, -0.0096, 2.3741, 3.2793, 0.3661, 49.0964, 15.9573],
    'VeLO-PBI':     [0.9010, 37.2193, 0.8469, 0.0086, -0.0464, 2.0372, 2.8864, 0.3614, 44.0772, 14.1305],
    'VeLO-COSMOS':  [0.6536, 14.2905, 0.6647, 0.0332, -0.0375, 1.6633, 1.2173, 0.5480, 10.3393,  7.9142],
    'VeLO-STche':   [0.8856, 13.6264, 0.7690, 0.0274, -0.0551, 0.4597, 2.5907, 0.1726, 59.3579,  6.9531],
    'VeLO-AASF':    [0.7140, 52.1614, 0.7315, 0.0439, -0.0360, 2.8787, 2.9594, 0.4592, 31.3263, 70.9990],
    'VeLO-PNorm':   [0.7588,  9.9019, 0.8444, 0.0144, -0.0597, 1.0380, 2.7551, 0.2471, 52.1683,  7.0878],
    'VeLO-mTche':   [0.6662, 16.1188, 0.7093, 0.0755,  0.0040, 2.4052, 1.1829, 0.6784,  7.8408, 18.5260],
    'VeLO-invagg':  [0.9486, 24.3667, 0.9694, 0.0023, -0.1009, 0.6640, 2.8679, 0.1991, 55.5095, 15.4802],
    'VeLO-SmTche':  [0.7273, 28.8916, 0.6185, 0.0403, -0.0078, 4.0536, 2.9229, 0.6720, 21.9751, 10.0803],
    'VeLO-EPO':     [0.7356, 17.1855, 0.7326, 0.0222, -0.0393, 1.4521, 1.0846, 0.5508,  6.8306, 16.3492],
    'VeLO-MGDAUB':  [0.2209,  3.1582, 0.0449, 0.0007, -0.1807, 0.0123, 3.3436, 0.4521, 44.5158,  0.3043],
    'VeLO-PMGDA':   [0.7263, 29.6907, 0.7898, 0.0118, -0.0532, 1.7362, 1.0082, 0.5882,  7.2378,  4.8837],
    'VeLO-Random':  [0.9598, 20.3845, 0.7698, 0.0001, -0.1335, 0.2199, 2.9429, 0.2419, 55.1630,  7.9958],
    'VeLO-MOOSVGD': [0.2637,  2.3459, 0.0530, 0.0504, -0.0981, 1.1164, 3.8792, 0.5270, 44.5396,  1.0468],
    'VeLO-PMTL':    [0.6812,119.9070, 0.8134, 0.0989,  0.0347, 8.1290, 2.0366, 1.2333,  7.6204, 52.6826],
    'VeLO-HVGrad':  [0.9356, 17.6670, 0.8756, 0.0658, -0.0111, 0.6453, 2.9981, 0.2257, 59.5258,  8.7032],
}


data_ZDT4 = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'FD', 'PBI', 'IP', 'CA', 'Sparsity'],
    'VeLO-LS':      [31.6120, 613.1387, 0.9975, 0.3170, 0.2698, 95.1205, 25.0104,  7.4176, 39.1568,   6443.2381],
    'VeLO-Tche':    [23.7102, 399.6620, 0.6963, 0.5775, 0.5420,175.2566, 68.5966,  8.8247, 39.4373,  66599.4146],
    'VeLO-PBI':     [22.9448, 326.9135, 0.0793, 0.0583, 0.0079, 86.5029, 36.3316,  5.2675, 37.2876,     87.9623],
    'VeLO-COSMOS':  [24.4826, 466.0854, 0.9730, 0.2420, 0.2049,199.6655, 62.8092, 12.7685, 35.5031, 143170.8801],
    'VeLO-STche':   [31.0328, 677.6449, 0.9453, 0.3055, 0.2632,135.8156, 34.2271, 10.4604, 35.9495,  18813.4180],
    'VeLO-AASF':    [33.1467, 683.5391, 0.9616, 0.1803, 0.1238, 70.0895, 33.2832,  2.1687, 28.2733,    279.6945],
    'VeLO-PNorm':   [31.0868, 922.9508, 0.9890, 0.3326, 0.2850,120.4819, 24.9547, 10.5078, 35.4844,    604.5490],
    'VeLO-mTche':   [23.4164, 338.1338, 0.6885, 0.2055, 0.1656,136.5701, 41.2679,  9.8855, 36.2630,  63271.1464],
    'VeLO-invagg':  [32.8982,  54.4475, 0.9911, 0.0968, 0.0462, 22.6967, 11.9679,  1.4267, 42.5288,    145.9367],
    'VeLO-SmTche':  [32.2660,1067.0603, 0.9616, 0.0547, 0.0128, 70.8102, 33.7823,  2.1648, 29.6242,    163.2114],
    'VeLO-EPO':     [23.7245, 233.2260, 0.6771, 0.2681, 0.2204,143.3079, 48.2456,  9.2431, 35.8606,  89189.4887],
    'VeLO-MGDAUB':  [28.9937,  25.5732, 0.0000, 0.0161,-0.0416, 34.2316, 16.2611,  2.2381, 44.9998,      0.0000],
    'VeLO-PMGDA':   [33.2176,  15.3258, 0.4469, 0.0651,-0.0257, 15.3892,  8.1279,  1.4316, 38.4845,     77.7044],
    'VeLO-Random':  [30.8473, 174.1810, 0.2759, 0.0566,-0.0231, 22.8155, 10.7898,  1.7330, 30.9364,     16.4901],
    'VeLO-MOOSVGD': [29.6364, 164.8897, 0.0073, 0.0926, 0.0332, 53.6375, 23.8444,  3.1501, 44.9692,     62.2833],
    'VeLO-PMTL':    [24.2727,1733.9365, 0.4482, 0.2976, 0.2525,239.8356, 75.8853, 15.2422, 36.7084, 304880.4413],
    'VeLO-HVGrad':  [34.4031, 386.4197, 0.8670, 0.2325, 0.1710, 36.9163, 18.7199,  2.0247, 40.3792,     76.3796],
}

data_MultiMNIST = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'PBI', 'IP', 'CA', 'Sparsity'],

    # Aggregation-style
    'VeLO-LS':     [0.9996, 0.7511, 0.0213, 0.0004, -0.2112, 0.0465, 0.0043, 43.5498, 0.0006],
    'VeLO-Tche':   [0.9709, 0.7916, 0.0425, 0.0022, -0.1998, 0.1218, 0.0310, 18.6729, 0.0025],
    'VeLO-PBI':    [0.9864, 0.4546, 0.0237, 0.0018, -0.2108, 0.0262, 0.0166, 1.5207, 0.0005],
    'VeLO-COSMOS': [0.8627, 0.2491, 0.0511, 0.0091, -0.1923, 0.1537, 0.1063, 0.4422, 0.0150],
    'VeLO-STche':  [0.9993, 0.6180, 0.0225, 0.0005, -0.2100, 0.0533, 0.0048, 42.6570, 0.0071],
    'VeLO-AASF':   [0.9995, 0.5248, 0.0141, 0.0002, -0.2149, 0.0206, 0.0052, 20.0921, 0.0000],
    'VeLO-PNorm':  [0.9988, 0.4116, 0.0117, 0.0005, -0.2165, 0.0296, 0.0035, 34.1091, 0.0002],
    'VeLO-mTche':  [0.9859, 0.5803, 0.0164, 0.0014, -0.2122, 0.0266, 0.0154, 2.5212, 0.0010],
    'VeLO-invagg': [0.9991, 0.4836, 0.0230, 0.0003, -0.2113, 0.0474, 0.0042, 41.7952, 0.0015],
    'VeLO-SmTche': [0.9995, 0.4948, 0.0116, 0.0002, -0.2175, 0.0162, 0.0037, 20.3676, 0.0001],

    # Others
    'VeLO-EPO':    [0.9881, 0.3361, 0.0151, 0.0015, -0.2134, 0.0236, 0.0137, 2.3591, 0.0007],
    'VeLO-MGDAUB': [0.9915, 0.2378, 0.0007, 0.0002, -0.2155, 0.0772, 0.0094, 44.3260, 0.0051],
    'VeLO-Random': [0.9977, 0.1741, 0.0063, 0.0001, -0.2217, 0.0082, 0.0030, 10.6295, 0.0000],
    'VeLO-PMGDA':  [0.9043, 0.3404, 0.0233, 0.0065, -0.1965, 0.1462, 0.0723, 5.3054, 0.0905],
    'VeLO-MOOSVGD':[0.9233, 3.1749, 0.3091, 0.0619, -0.0882, 0.7353, 0.2194, 16.5190, 0.0000],
    'VeLO-HVGrad': [0.9998, 1.9741, 0.2264, 0.0154, -0.1183, 0.6040, 0.0676, 45.9876, 1.3007],
    'VeLO-PMTL':   [0.9236, 1.6524, 0.0910, 0.0074, -0.1729, 0.1700, 0.0898, 4.7380, 0.0287],
}

data_MultiFashion = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'PBI', 'IP', 'CA', 'Sparsity'],

    # Aggregation-style
    'VeLO-LS':     [0.8512, 1.3129, 0.1465, 0.0107, -0.1522, 0.6153, 0.1436, 21.8279, 0.3384],
    'VeLO-Tche':   [0.7262, 0.9411, 0.0973, 0.0136, -0.1705, 0.5957, 0.1916, 13.6326, 0.0840],
    'VeLO-PBI':    [0.7267, 0.6553, 0.0871, 0.0155, -0.1704, 0.2907, 0.1966, 0.6288, 0.2131],
    'VeLO-COSMOS': [0.7056, 1.1114, 0.0766, 0.0122, -0.1751, 0.2981, 0.2046, 0.4450, 0.0564],
    'VeLO-STche':  [0.8520, 0.9978, 0.1512, 0.0189, -0.1458, 0.6356, 0.1472, 22.2602, 0.2537],
    'VeLO-AASF':   [0.7959, 1.3366, 0.1180, 0.0161, -0.1598, 0.3305, 0.1691, 4.5523, 0.2209],
    'VeLO-PNorm':  [0.8286, 1.2416, 0.1428, 0.0159, -0.1525, 0.6174, 0.1489, 20.7937, 0.1696],
    'VeLO-mTche':  [0.7167, 1.0204, 0.0996, 0.0149, -0.1683, 0.3114, 0.2053, 0.9318, 0.1452],
    'VeLO-invagg': [0.8700, 0.9015, 0.1729, 0.0134, -0.1516, 0.6395, 0.1356, 24.2314, 0.1119],
    'VeLO-SmTche': [0.8123, 1.1734, 0.1310, 0.0192, -0.1533, 0.3257, 0.1654, 4.6932, 0.2243],

    # Others
    'VeLO-EPO':    [0.7278, 0.8869, 0.0889, 0.0138, -0.1713, 0.2995, 0.1954, 1.0690, 0.0974],
    'VeLO-MGDAUB': [0.7565, 0.6270, 0.0545, 0.0081, -0.1880, 0.3919, 0.1619, 8.2084, 0.0283],
    'VeLO-Random': [0.7313, 0.7745, 0.0519, 0.0035, -0.1968, 0.3712, 0.1687, 6.4460, 0.0095],
    'VeLO-PMGDA':  [0.5883, 0.7588, 0.0900, 0.0125, -0.1730, 0.4387, 0.2810, 1.2400, 0.1366],
    'VeLO-MOOSVGD':[0.6096, 3.9556, 0.3117, 0.0614, -0.0861, 1.0654, 0.3979, 9.1133, 0.0000],
    'VeLO-HVGrad': [0.9159, 5.2992, 0.6830, 0.0416, -0.0402, 1.6380, 0.2326, 34.3870, 2.5464],
    'VeLO-PMTL':   [0.5837, 5.3317, 0.1820, 0.0116, -0.1594, 0.4859, 0.2932, 1.9107, 0.0821],
}

data_FashionMNIST = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'PBI', 'IP', 'CA', 'Sparsity'],

    # Aggregation-style
    'VeLO-LS':     [0.9923, 1.3216, 0.0802, 0.0040, -0.1722, 0.2920, 0.0335, 41.3664, 0.2242],
    'VeLO-Tche':   [0.9298, 0.6469, 0.0324, 0.0079, -0.1826, 0.3171, 0.0590, 26.3317, 0.0585],
    'VeLO-PBI':    [0.9366, 1.1338, 0.0569, 0.0069, -0.1888, 0.0976, 0.0635, 1.4249, 0.1632],
    'VeLO-COSMOS': [0.8552, 0.4225, 0.0645, 0.0132, -0.1813, 0.1763, 0.1244, 0.3946, 0.0841],
    'VeLO-STche':  [0.9945, 1.1353, 0.0785, 0.0054, -0.1651, 0.3408, 0.0335, 44.7826, 0.1736],
    'VeLO-AASF':   [0.9831, 0.9958, 0.0651, 0.0046, -0.1823, 0.1493, 0.0413, 18.6026, 0.1243],
    'VeLO-PNorm':  [0.9852, 0.9918, 0.0500, 0.0078, -0.1727, 0.2885, 0.0328, 38.7859, 0.3323],
    'VeLO-mTche':  [0.9414, 0.6001, 0.0533, 0.0092, -0.1881, 0.1029, 0.0602, 2.9152, 0.0456],
    'VeLO-invagg': [0.9955, 1.1232, 0.0935, 0.0050, -0.1746, 0.2616, 0.0265, 43.9145, 0.0779],
    'VeLO-SmTche': [0.9901, 1.2156, 0.0666, 0.0063, -0.1848, 0.1275, 0.0352, 20.0236, 0.0866],

    # Others
    'VeLO-EPO':    [0.9373, 0.5410, 0.0502, 0.0081, -0.1883, 0.1077, 0.0630, 2.8757, 0.1485],
    'VeLO-MGDAUB': [0.9859, 1.7650, 0.1147, 0.0056, -0.1651, 0.2989, 0.0601, 25.7231, 0.2579],
    'VeLO-Random': [0.9313, 0.4082, 0.0052, 0.0007, -0.2052, 0.3612, 0.0568, 36.0341, 0.0184],
    'VeLO-PMGDA':  [0.8122, 0.6260, 0.0682, 0.0124, -0.1752, 0.3227, 0.1531, 6.1589, 0.1126],
    'VeLO-MOOSVGD':[0.8806, 2.5221, 0.2967, 0.0632, -0.0897, 0.8097, 0.2332, 17.9309, 1.8850],
    'VeLO-HVGrad': [0.9941, 5.9712, 0.3603, 0.0181, -0.0858, 1.0022, 0.1321, 40.6030, 2.2968],
    'VeLO-PMTL':   [0.8645, 2.3477, 0.1431, 0.0195, -0.1488, 0.3421, 0.1564, 6.6563, 0.4059],
}

data_adult = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'PBI', 'IP', 'CA', 'Sparsity'],

    # Aggregation-style
    'VeLO-LS':     [0.7602, 0.2532, 0.0057, 0.0006, -0.2099, 0.5065, 0.1647, 18.1985, 0.0141],
    'VeLO-Tche':   [0.7579, 0.2403, 0.0048, 0.0007, -0.2109, 0.5125, 0.1649, 18.5034, 0.0054],
    'VeLO-PBI':    [0.7665, 0.2186, 0.0129, 0.0016, -0.2060, 0.4407, 0.1686, 14.3023, 0.0150],
    'VeLO-COSMOS': [0.7583, 0.3175, 0.0533, 0.0082, -0.1858, 0.3269, 0.2294,  2.5512, 0.0209],
    'VeLO-STche':  [0.7541, 0.3197, 0.0045, 0.0004, -0.2131, 0.5113, 0.1641, 18.5756, 0.0079],
    'VeLO-AASF':   [0.7831, 3.4045, 0.0732, 0.0093, -0.1542, 0.3457, 0.2725,  1.3794, 0.2559],
    'VeLO-PNorm':  [0.7554, 0.1826, 0.0050, 0.0004, -0.2104, 0.5082, 0.1651, 18.3280, 0.0071],
    'VeLO-mTche':  [0.7620, 1.9114, 0.0747, 0.0079, -0.1573, 0.3299, 0.2785,  0.4103, 0.1234],
    'VeLO-invagg': [0.7525, 0.1652, 0.0057, 0.0005, -0.2106, 0.5025, 0.1676, 17.5456, 0.0159],
    'VeLO-SmTche': [0.7847, 3.4000, 0.0721, 0.0117, -0.1525, 0.3522, 0.2749,  1.5355, 0.2703],

    # Non-aggregation (baselines)
    'VeLO-EPO':    [0.7714, 2.0016, 0.0678, 0.0107, -0.1577, 0.3181, 0.2694,  0.4293, 0.1308],
    'VeLO-MGDAUB': [0.5263, 0.2507, 0.0025, 0.0005, -0.2163, 0.9235, 0.4087, 10.7292, 0.0050],
    'VeLO-Random': [0.7397, 0.2750, 0.0064, 0.0006, -0.2177, 0.4482, 0.1811, 12.7329, 0.0074],
    'VeLO-PMGDA':  [0.7422, 2.2296, 0.0853, 0.0123, -0.1631, 0.3538, 0.2925,  0.6878, 0.1641],
    'VeLO-MOOSVGD':[0.6659, 1.9799, 0.0560, 0.0568, -0.0889, 1.1334, 0.5210,  9.6194, 0.5779],
    'VeLO-HVGrad': [0.8080, 1.7366, 0.0966, 0.0128, -0.1318, 0.6239, 0.2844, 10.2591, 0.2545],
    'VeLO-PMTL':   [0.7096, 1.0547, 0.0506, 0.0047, -0.1578, 0.5218, 0.3267,  5.0496, 0.1307],
}

data_credit = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'PBI', 'IP', 'CA', 'Sparsity'],

    # Aggregation-style
    'VeLO-LS':     [0.7716, 0.2642, 0.0018, 0.0012, -0.2051, 0.2932, 0.2383, 2.3081, 0.0232],
    'VeLO-Tche':   [0.7706, 0.4237, 0.0018, 0.0008, -0.2045, 0.2935, 0.2394, 2.2756, 0.0158],
    'VeLO-PBI':    [0.7688, 0.2590, 0.0038, 0.0008, -0.2040, 0.2811, 0.2442, 1.4117, 0.0371],
    'VeLO-COSMOS': [0.7667, 0.3067, 0.0037, 0.0017, -0.2048, 0.2791, 0.2432, 1.3645, 0.0127],
    'VeLO-STche':  [0.7644, 0.3075, 0.0019, 0.0007, -0.2074, 0.2929, 0.2401, 2.1951, 0.0157],
    'VeLO-AASF':   [0.7054, 2.2596, 0.0054, 0.0114, -0.1523, 0.4250, 0.3909, 0.8196, 0.1940],
    'VeLO-PNorm':  [0.7659, 0.2922, 0.0018, 0.0009, -0.2059, 0.2926, 0.2389, 2.2490, 0.0281],
    'VeLO-mTche':  [0.7122, 0.9226, 0.0062, 0.0029, -0.1824, 0.3429, 0.3266, 0.2853, 0.0414],
    'VeLO-invagg': [0.7669, 0.2754, 0.0016, 0.0008, -0.2071, 0.2906, 0.2374, 2.2292, 0.0268],
    'VeLO-SmTche': [0.7006, 2.2112, 0.0051, 0.0084, -0.1537, 0.4265, 0.3921, 0.8230, 0.1587],

    # Non-aggregation (baselines)
    'VeLO-EPO':    [0.6585, 0.5178, 0.0057, 0.0015, -0.1919, 0.3906, 0.3674, 0.4359, 0.0221],
    'VeLO-MGDAUB': [0.5488, 0.0617, 0.0004, 0.0002, -0.2220, 0.4960, 0.4418, 1.0759, 0.0007],
    'VeLO-Random': [0.7141, 0.2741, 0.0015, 0.0004, -0.2146, 0.3125, 0.2841, 0.8294, 0.0346],
    'VeLO-PMGDA':  [0.5636, 0.2937, 0.0138, 0.0015, -0.2116, 0.4676, 0.4375, 0.4757, 0.0142],
    'VeLO-MOOSVGD':[0.5785, 9.4064, 0.0095, 0.0472, -0.0928, 0.8058, 0.7051, 1.1978, 4.9709],
    'VeLO-HVGrad': [0.6767, 6.5873, 0.0112, 0.0022, -0.1793, 0.4612, 0.4132, 0.9289, 1.6293],
    'VeLO-PMTL':   [0.5676, 0.1207, 0.0038, 0.0007, -0.2137, 0.4784, 0.4335, 0.8770, 0.0024],
}

data_compas = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'PBI', 'IP', 'CA', 'Sparsity'],

    # Aggregation-style
    'VeLO-LS':     [0.7991, 13.9497, 0.1917, 0.0008, -0.1905, 1.2781, 0.1424, 42.5740, 3.6805],
    'VeLO-Tche':   [0.8019, 6.2300, 0.1569, 0.0023, -0.1284, 1.3069, 0.1622, 41.6446, 0.8431],
    'VeLO-PBI':    [0.7652, 1.5991, 0.0666, 0.0021, -0.1710, 0.5606, 0.1752, 18.2029, 0.1297],
    'VeLO-COSMOS': [0.8041, 2.5914, 0.1365, 0.0064, -0.1277, 0.4123, 0.2473, 3.4587, 0.2925],
    'VeLO-STche':  [0.8136, 9.0476, 0.1809, 0.0012, -0.1612, 1.3096, 0.1444, 44.6429, 1.7453],
    'VeLO-AASF':   [0.8167, 8.7900, 0.1830, 0.0034, -0.1329, 0.4459, 0.2713, 4.8145, 1.4942],
    'VeLO-PNorm':  [0.8103, 8.3663, 0.1765, 0.0012, -0.1589, 1.2881, 0.1468, 43.7824, 1.3560],
    'VeLO-mTche':  [0.8067, 8.8547, 0.1711, 0.0024, -0.1240, 0.3942, 0.2792, 2.0412, 1.4787],
    'VeLO-invagg': [0.7987, 13.1392, 0.1833, 0.0008, -0.1899, 1.2441, 0.1433, 41.9180, 3.4291],
    'VeLO-SmTche': [0.8173, 8.7990, 0.1824, 0.0047, -0.1332, 0.4464, 0.2723, 4.8308, 1.5849],

    # Non-aggregation (baselines)
    'VeLO-EPO':    [0.8150, 7.9417, 0.1779, 0.0031, -0.1222, 0.3866, 0.2753, 1.9435, 1.3004],
    'VeLO-MGDAUB': [0.2254, 2.6572, 0.0272, 0.0024, -0.1564, 3.9003, 0.5495, 41.6470, 0.3722],
    'VeLO-Random': [0.7043, 0.2602, 0.0079, 0.0003, -0.2199, 0.7736, 0.1603, 29.0420, 0.0051],
    'VeLO-PMGDA':  [0.8153, 7.7649, 0.1764, 0.0105, -0.1211, 0.3930, 0.2769, 2.1606, 1.2176],
    'VeLO-MOOSVGD':[0.7401, 68.6665, 0.2277, 0.0222, -0.0756, 6.8887, 0.9210, 36.3411, 142.3910],
    'VeLO-HVGrad': [0.8169, 9.5320, 0.2280, 0.0616, -0.0486, 2.0148, 0.3278, 32.8209, 3.2120],
    'VeLO-PMTL':   [0.7456, 9.7445, 0.1631, 0.0070, -0.1121, 0.4997, 0.3509, 2.4249, 2.7516],
}

data_electricity_demand = {
    'Metric': ['HV', 'Spacing', 'Span', 'l_min', 's_lmin', 'PBI', 'IP', 'CA', 'Sparsity'],

    # Aggregation-style
    'VeLO-LS':     [0.9846, 0.2310, 0.0146, 0.0010, -0.2115, 0.0919, 0.0181, 29.0977, 0.0005],
    'VeLO-Tche':   [0.9780, 0.7221, 0.0263, 0.0023, -0.2057, 0.1390, 0.0229, 35.3909, 0.0461],
    'VeLO-PBI':    [0.9780, 0.1864, 0.0163, 0.0014, -0.2123, 0.0932, 0.0220, 26.4338, 0.0000],
    'VeLO-COSMOS': [0.9463, 1.6656, 0.0758, 0.0122, -0.1697, 0.1376, 0.0882, 2.3548, 0.0646],
    'VeLO-STche':  [0.9827, 0.2790, 0.0181, 0.0003, -0.2086, 0.1036, 0.0212, 28.4430, 0.0027],
    'VeLO-AASF':   [0.9808, 0.5786, 0.0211, 0.0012, -0.2083, 0.0977, 0.0234, 25.4175, 0.0037],
    'VeLO-PNorm':  [0.9783, 0.2357, 0.0160, 0.0005, -0.2110, 0.1062, 0.0225, 28.6156, 0.0001],
    'VeLO-mTche':  [0.9809, 0.4233, 0.0212, 0.0004, -0.2058, 0.0808, 0.0281, 13.9575, 0.0239],
    'VeLO-invagg': [0.9449, 0.1908, 0.0083, 0.0000, -0.2191, 0.1518, 0.0336, 27.8530, 0.0045],
    'VeLO-SmTche': [0.9827, 0.5380, 0.0249, 0.0019, -0.2058, 0.0793, 0.0251, 20.2729, 0.0099],

    # Baselines
    'VeLO-EPO':    [0.9806, 0.5801, 0.0301, 0.0006, -0.2058, 0.0790, 0.0266, 14.8233, 0.0184],
    'VeLO-MGDAUB': [0.9687, 2.7768, 0.0185, 0.0000, -0.2036, 0.1398, 0.0409, 25.3167, 1.4345],
    'VeLO-Random': [0.9776, 0.4175, 0.0254, 0.0001, -0.2099, 0.1076, 0.0213, 29.8533, 0.0000],
    'VeLO-PMGDA':  [0.9840, 20.6633, 0.2294, 0.0011, -0.1561, 0.1785, 0.1496, 4.9687, 0.0000],
    'VeLO-MOOSVGD':[0.9705, 0.4767, 0.1593, 0.0547, -0.1044, 0.6731, 0.1132, 32.1777, 1.3493],
    'VeLO-HVGrad': [0.9657, 0.2886, 0.0181, 0.0001, -0.2136, 0.1311, 0.0298, 27.1586, 0.0015],
    'VeLO-PMTL':   [0.9784, 0.2170, 0.0197, 0.0001, -0.2099, 0.1047, 0.0247, 24.3618, 0.0000],
}


# Build problem -> data mapping, skipping any missing variables safely
ALL = {}
for name, var in [
    ('VLMOP2', 'data_VLMOP2'),
    ('ZDT3', 'data_ZDT3'),
    ('ZDT4', 'data_ZDT4'),
    ('mnist', 'data_MultiMNIST'),
    ('fashion', 'data_MultiFashion'),
    ('fmnist', 'data_FashionMNIST'),
    ('adult', 'data_adult'),
    ('credit', 'data_credit'),                # will be skipped if not defined
    ('compas', 'data_compas'),
    ('electricity_demand', 'data_electricity_demand'),
]:
    if var in globals() and isinstance(globals()[var], dict):
        ALL[name] = globals()[var]

# ----- metric directions (LibMOON evaluation convention) -----
PREFER_HIGH = {"HV", "l_min", "s_lmin", "Span"}
PREFER_LOW  = {"IGD", "FD", "Spacing", "PBI", "IP", "CA", "Sparsity"}
# Fixed order for radar plots (synthetic + real problems)
METRIC_ORDER = [
    "HV", "Spacing", "Span", "l_min", "s_lmin", "FD", "PBI", "IP", "CA", "Sparsity"
]

def normalize_for_radar(df: pd.DataFrame) -> pd.DataFrame:
    """
    Orient all metrics so that 'higher is better', then min–max normalize per row to [0,1].
    Works even if some metrics are absent.
    """
    df2 = df.copy()
    for m in (PREFER_LOW & set(df2.index)):
        mx = df2.loc[m].max()
        df2.loc[m] = mx - df2.loc[m]
    mins = df2.min(axis=1)
    maxs = df2.max(axis=1)
    rng  = (maxs - mins).replace(0, 1.0)
    return (df2.sub(mins, axis=0)).div(rng, axis=0)

def plot_radar(df_part: pd.DataFrame, title: str, outfile: str | None = None):
    """Plot a radar chart for given (metrics x methods) df."""
    if df_part.empty:
        return
    labels = df_part.index.tolist()
    num_vars = len(labels)
    angles = np.linspace(0, 2*np.pi, num_vars, endpoint=False).tolist()
    angles += angles[:1]

    fig, ax = plt.subplots(figsize=(7, 7), subplot_kw=dict(polar=True))
    for method in df_part.columns:
        vals = df_part[method].to_numpy().tolist()
        vals += vals[:1]
        ax.plot(angles, vals, linewidth=2, label=method, alpha=0.9)
        ax.fill(angles, vals, alpha=0.08)

    ax.set_title(title, pad=14)
    ax.set_theta_offset(np.pi/2)
    ax.set_theta_direction(-1)
    ax.set_thetagrids(np.degrees(angles[:-1]), labels)
    ax.set_ylim(0, 1)
    ax.set_yticklabels([])
    ax.grid(True, alpha=0.5)
    # keep legend inside to avoid cropping
    #ax.legend(loc='upper left', bbox_to_anchor=(0.02, 0.98), frameon=False)
    #plt.tight_layout()

    ax.legend(
        loc='center left',
        bbox_to_anchor=(1.1, 0.5),   # push legend outside on the right
        frameon=False
    )
    plt.tight_layout()


    if outfile:
        os.makedirs(os.path.dirname(outfile), exist_ok=True)
        plt.savefig(outfile, dpi=300, bbox_inches='tight')
    plt.close(fig)

def make_grouped_radars(problem_name: str, data_dict: dict, out_root: str = "radar_charts",
                        topk: int | None = 6):
    """Build Aggregation vs Others radar charts (+ optional Top-k by HV) for one problem."""
    df = pd.DataFrame(data_dict).set_index('Metric')
    df_norm = normalize_for_radar(df)

    # Split methods
    all_methods = df_norm.columns.tolist()
    agg_names = ['VeLO-LS', 'VeLO-Tche', 'VeLO-PBI', 'VeLO-COSMOS', 'VeLO-STche', 'VeLO-AASF', 'VeLO-PNorm', 'VeLO-mTche', 'VeLO-invagg', 'VeLO-SmTche']
    agg_methods = [c for c in all_methods if c in agg_names]
    rest_methods = [c for c in all_methods if c not in agg_methods]

    outdir = os.path.join(out_root, problem_name)

    if agg_methods:
        plot_radar(
            df_norm[agg_methods],
            f'{problem_name}: Aggregation methods',
            os.path.join(outdir, f'{problem_name}_radar_agg.png')
        )
    if rest_methods:
        plot_radar(
            df_norm[rest_methods],
            f'{problem_name}: Other methods',
            os.path.join(outdir, f'{problem_name}_radar_rest.png')
        )

    # Optional: Top-k by HV (if HV exists)
    if topk is not None and 'HV' in df.index and len(all_methods) > 0:
        hv_sorted = df.loc['HV'].sort_values(ascending=False)
        chosen = hv_sorted.index[:min(topk, len(hv_sorted))].tolist()
        plot_radar(
            df_norm[chosen],
            f'{problem_name}: Top-{len(chosen)} by HV',
            os.path.join(outdir, f'{problem_name}_radar_top{len(chosen)}.png')
        )

# ====== run for all problems ======
for name, dat in ALL.items():
    make_grouped_radars(name, dat, out_root="radar_charts", topk=6)

print("Done. Charts saved under ./radar_charts/<problem>/")
